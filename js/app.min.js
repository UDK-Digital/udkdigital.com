(function () {
    'use strict';

    // GSAP Eklentilerini kaydet
    gsap.registerPlugin(ScrollTrigger, Flip);

    // Tüm DOM elementlerini bir kere sorgulayıp burada saklayacağız.
    const DOM = {};

    /**
     * DOM elementlerini bulur ve `DOM` nesnesine önbelleğe alır.
     * Bu fonksiyon sadece bir kez çalışır.
     */
    const cacheDOMElements = () => {
        DOM.content = document.querySelector("body");
        DOM.loadingWrap = document.querySelector(".loading-wrap");
        DOM.fadeInItems = document.querySelectorAll(".loading__fade");
        DOM.loader = document.getElementById("loader");
        DOM.header = document.querySelector(".mxd-header");
        DOM.pinnedSections = document.querySelectorAll(".mxd-pinned");
        DOM.stackCards = document.querySelectorAll(".stack-item");
        DOM.stackWrapper = document.querySelector(".stack-wrapper");
        DOM.stackOffset = document.querySelector(".stack-offset");
        DOM.revealTypes = document.querySelectorAll(".reveal-type");
        DOM.revealInUp = document.querySelectorAll(".reveal-in-up");
        DOM.rotations = document.querySelectorAll(".animate-rotation");
        DOM.animInUp = document.querySelectorAll(".anim-uni-in-up");
        DOM.zoomInContainers = document.querySelectorAll(".anim-zoom-in-container");
        DOM.zoomOutContainers = document.querySelectorAll(".anim-zoom-out-container");
        DOM.hoverRevealItems = document.querySelectorAll(".hover-reveal__item");
        DOM.hoverRevealContents = document.querySelectorAll(".hover-reveal__content");
        DOM.hoverRevealImages = document.querySelectorAll(".hover-reveal__image");
        DOM.masonryGallery = document.querySelector(".mxd-projects-masonry__gallery");
        DOM.accordions = document.querySelectorAll(".mxd-accordion");
        DOM.themeBtn = document.querySelector("#color-switcher");
        DOM.toTopBtn = document.querySelector(".btn-to-top");
        DOM.svgToInject = document.querySelectorAll("img.inject-me");
        DOM.navWraps = document.querySelectorAll(".mxd-nav__wrap");
        DOM.parallaxImages = document.querySelectorAll(".parallax-img");
        DOM.parallaxImagesSmall = document.querySelectorAll(".parallax-img-small");
        DOM.parallaxVideos = document.querySelectorAll(".parallax-video");
        DOM.dataSpeedElements = document.querySelectorAll("[data-speed]");
        DOM.typedElements = document.querySelectorAll(".animated-type");
    };

    /**
     * Lenis ile yumuşak kaydırmayı başlatır.
     */
    let lenis;
    const initSmoothScroll = () => {
        lenis = new Lenis();
        lenis.on("scroll", ScrollTrigger.update);
        gsap.ticker.add((time) => lenis.raf(time * 1000));
        gsap.ticker.lagSmoothing(0);
    };

    /**
     * Sayfa yükleyici animasyonlarını yönetir.
     */
    const initLoader = () => {
        if (!DOM.loadingWrap) return;

        const loadingItems = DOM.loadingWrap.querySelectorAll(".loading__item");
        const loaderCountEl = DOM.loadingWrap.querySelector(".loader__count .count__text");
        let count = 0;

        const startLoader = () => {
            if (!loaderCountEl) return;
            (function animateCount() {
                if (count < 100) {
                    count = Math.min(count + Math.floor(10 * Math.random()) + 1, 100);
                    loaderCountEl.textContent = count;
                    setTimeout(animateCount, Math.floor(120 * Math.random()) + 25);
                }
            })();
        };

        const hideLoader = () => {
            gsap.to(".loader__count", { duration: 0.8, ease: "power2.in", y: "100%", delay: 1.8 });
            gsap.to(".loader__wrapper", { duration: 0.8, ease: "power4.in", y: "-100%", delay: 2.2 });
            setTimeout(() => DOM.loader?.classList.add("loaded"), 3200);
        };

        const pageAppearance = () => {
            gsap.to(loadingItems, { duration: 1.1, ease: "power4", y: 0, opacity: 1, delay: 0.8, stagger: 0.08, startAt: { y: 120, opacity: 0 } });
            gsap.to(DOM.fadeInItems, { duration: 0.8, ease: "none", opacity: 1, delay: 3.2, startAt: { opacity: 0 } });
        };

        startLoader();
        imagesLoaded(DOM.content).on("done", () => {
            hideLoader();
            pageAppearance();
        });
    };
    
    /**
     * Tekrarlanan ScrollTrigger "scrub" animasyonları için yardımcı fonksiyon.
     */
    const createScrubAnimation = (selector, trigger, start, end, fromVars, toVars, ease = "none") => {
        gsap.utils.toArray(selector).forEach(el => {
            gsap.timeline({
                scrollTrigger: { trigger, start, end, scrub: true, ease }
            }).fromTo(el, fromVars, toVars);
        });
    };
    
    /**
     * Tekrarlanan ScrollTrigger "batch" animasyonları için yardımcı fonksiyon.
     */
    const createBatchAnimation = (selector, batchMax) => {
        const elements = gsap.utils.toArray(selector);
        if (elements.length > 0) {
            gsap.set(elements, { y: 50, opacity: 0 });
            ScrollTrigger.batch(elements, {
                interval: 0.1,
                batchMax: batchMax,
                onEnter: batch => gsap.to(batch, { opacity: 1, y: 0, ease: "sine", stagger: 0.15, overwrite: true }),
                onLeaveBack: batch => gsap.set(batch, { opacity: 0, y: 50, overwrite: true }),
            });
        }
    };

    /**
     * Tüm ScrollTrigger temelli animasyonları başlatır.
     */
    const initScrollTriggers = () => {
        // Header'ın gizlenmesi
        ScrollTrigger.create({
            trigger: "body",
            start: "top top-=-10",
            toggleClass: { targets: DOM.header, className: "is-hidden" }
        });

        // Hero Bölümü Animasyonları
        createScrubAnimation(".hero-02-static-anim-el", ".hero-02-static__tl-trigger", "top 14%", "top 0.2%", { y: 0, scaleY: 1, opacity: 1 }, { y: -80, scaleY: 1.3, opacity: 0 }, "sine");
        createScrubAnimation(".hero-02-fade-out-scroll", ".mxd-pinned-fullscreen__tl-trigger", "top 80%", "top 10%", { opacity: 1 }, { opacity: 0 }, "sine");
        createScrubAnimation(".hero-07-slide-out-scroll", ".mxd-hero-07__tl-trigger", "top 86%", "top 10%", { y: 0, scaleY: 1 }, { y: -416, scaleY: 0.8 }, "power4.out");
        createScrubAnimation(".hero-07-fade-out-scroll", ".mxd-hero-07__tl-trigger", "top 70%", "top 40%", { opacity: 1, y: 0 }, { opacity: 0, y: -160 }, "elastic.out(1,0.3)");
        createScrubAnimation(".hero-08-slide-out-scroll", ".mxd-hero-08__tl-trigger", "top 80%", "top 40%", { y: 0, opacity: 1 }, { y: -80, opacity: 0 }, "power4.inOut");
        createScrubAnimation(".hero-08-scale-out-scroll", ".mxd-hero-08__tl-trigger", "top 40%", "top 10%", { y: 0, scaleY: 1, opacity: 1 }, { y: -80, scaleY: 1.2, opacity: 0 }, "power4.inOut");

        // Pinned Section
        DOM.pinnedSections.forEach(section => {
            const textItems = gsap.utils.toArray(section.querySelectorAll(".mxd-pinned__text-item"));
            const imgItems = gsap.utils.toArray(section.querySelectorAll(".mxd-pinned__img-item"));
            const setActive = (index) => {
                textItems.forEach(item => item.classList.remove("is-active"));
                imgItems.forEach(item => item.classList.remove("is-active"));
                textItems[index]?.classList.add("is-active");
                imgItems[index]?.classList.add("is-active");
            };
            setActive(0);
            textItems.forEach((text, index) => {
                ScrollTrigger.create({
                    trigger: text,
                    start: "top center",
                    end: "bottom center",
                    onToggle: self => self.isActive && setActive(index),
                });
            });
        });

        // Stack-item
        if (DOM.stackCards.length > 0) {
            const animation = gsap.timeline({ paused: true });
            const initCards = () => {
                animation.clear();
                const cardHeight = DOM.stackCards[0].offsetHeight;
                DOM.stackCards.forEach((card, index) => {
                    if (index > 0) {
                        gsap.set(card, { y: index * cardHeight });
                        animation.to(card, { y: 0, duration: 0.5 * index, ease: "none" }, 0);
                    }
                });
            };
            initCards();
            ScrollTrigger.create({
                trigger: DOM.stackWrapper,
                start: "top top",
                pin: true,
                end: () => `+=${DOM.stackCards.length * DOM.stackCards[0].offsetHeight + (DOM.stackOffset ? DOM.stackOffset.offsetHeight : 0)}`,
                scrub: true,
                animation: animation,
                invalidateOnRefresh: true,
                onRefresh: initCards,
            });
        }
        
        // SplitType Metin Animasyonları
        DOM.revealTypes.forEach(el => {
            const text = new SplitType(el, { types: "words, chars" });
            gsap.from(text.chars, { scrollTrigger: { trigger: el, start: "top 80%", end: "top 20%", scrub: true }, opacity: 0.2, stagger: 0.1 });
        });
        DOM.revealInUp.forEach(el => {
            const text = new SplitType(el);
            gsap.from(text.chars, { scrollTrigger: { trigger: el, start: "top 90%", end: "top 20%", scrub: true }, y: 10, stagger: 0.2 });
        });

        // Diğer Genel Animasyonlar
        DOM.rotations.forEach(el => {
            gsap.to(el, { rotate: el.dataset.value || 0, ease: "none", scrollTrigger: { trigger: el, scrub: true } });
        });
        DOM.animInUp.forEach(el => {
            gsap.from(el, { opacity: 0, y: 50, duration: 0.8, ease: "power2.out", scrollTrigger: { trigger: el, start: "top 90%", toggleActions: "play none none reverse" } });
        });
        
        // Batch Animations
        createBatchAnimation(".animate-card-2", 2);
        createBatchAnimation(".animate-card-3", 3);
        createBatchAnimation(".animate-card-4", 4);
        createBatchAnimation(".animate-card-5", 5);

        // Zoom Container Animasyonları
        const docStyle = getComputedStyle(document.documentElement);
        const radiusL = docStyle.getPropertyValue("--_radius-l");
        DOM.zoomInContainers.forEach(el => gsap.fromTo(el, { borderRadius: "200px", scale: 0.94 }, { borderRadius: radiusL, scale: 1, scrollTrigger: { trigger: el, start: "top 82%", end: "top 14%", scrub: true, ease: "power4.inOut" } }));
        DOM.zoomOutContainers.forEach(el => gsap.fromTo(el, { borderRadius: "200px", scale: 1.14 }, { borderRadius: radiusL, scale: 1, scrollTrigger: { trigger: el, start: "top 82%", end: "top 14%", scrub: true, ease: "power4.inOut" } }));

        // Parallax Hızı
        DOM.dataSpeedElements.forEach(el => {
            gsap.to(el, {
                y: (i, target) => (1 - parseFloat(target.dataset.speed)) * ScrollTrigger.maxScroll(window),
                ease: "none",
                scrollTrigger: { start: 0, end: "max", invalidateOnRefresh: true, scrub: 0.1 }
            });
        });

        // Yukarı Çık Butonu
        if (DOM.toTopBtn) {
            DOM.toTopBtn.addEventListener("click", e => { e.preventDefault(); lenis.scrollTo(0, { duration: 1.3, ease: 'power4.inOut' }); });
            gsap.to(DOM.toTopBtn, { autoAlpha: 1, scrollTrigger: { trigger: "body", start: "top -20%", toggleActions: "play none reverse none" } });
        }
    };
    
    /**
     * Tüm olay dinleyicilerini (event listeners) ve eklentileri başlatır.
     */
    const initEventListeners = () => {
        // Typed.js
        if (DOM.typedElements.length > 0) {
            new Typed("#typed", { stringsElement: "#typed-strings", showCursor: true, cursorChar: "_", loop: true, typeSpeed: 70, backSpeed: 30, backDelay: 2500 });
        }
        
        // Hamburger Menü
        DOM.navWraps.forEach(navWrap => {
            const hamburger = navWrap.querySelector(".mxd-nav__hamburger");
            const lines = gsap.utils.toArray(navWrap.querySelectorAll(".hamburger__line"));
            const menuContain = navWrap.querySelector(".mxd-menu__contain");
            const hamburgerBase = navWrap.querySelector(".hamburger__base");
            const menuWrapper = navWrap.querySelector(".mxd-menu__wrapper");
            const menuBase = navWrap.querySelector(".mxd-menu__base");
            const menuItems = navWrap.querySelectorAll(".main-menu__item");
            const menuPromo = navWrap.querySelector(".menu-promo__video");
            const fadeInItems = navWrap.querySelectorAll(".menu-fade-in");
            
            const tl = gsap.timeline({ paused: true, onReverseComplete: () => moveHamburgerBase(false) });

            const moveHamburgerBase = (isOpening) => {
                const state = Flip.getState(hamburgerBase);
                (isOpening ? menuContain : hamburger).appendChild(hamburgerBase);
                Flip.from(state, { ease: "power4.inOut", duration: 0.8 });
            };

            const toggleMenu = (open) => {
                if (tl.isActive()) return;
                hamburger.classList.toggle("nav-open", open);
                DOM.header.classList.toggle("menu-is-visible", open);
                if (open) {
                    tl.play();
                } else {
                    setTimeout(() => DOM.header.classList.remove("menu-is-visible"), 1100);
                    tl.reverse();
                }
            };
            
            tl.set(menuWrapper, { display: "flex" })
              .from(menuBase, { opacity: 0, duration: 0.6, ease: "none", onStart: () => moveHamburgerBase(true) })
              .to(lines[0], { y: 5, duration: 0.16 }, "<")
              .to(lines[1], { y: -5, duration: 0.16 }, "<")
              .to(lines[0], { rotate: 45, duration: 0.16 }, 0.2)
              .to(lines[1], { rotate: -45, duration: 0.16 }, 0.2)
              .from(menuItems, { opacity: 0, yPercent: 50, duration: 0.2, stagger: 0.1 })
              .from(menuPromo, { opacity: 0, yPercent: 20, duration: 0.2 }, "-=0.2")
              .from(fadeInItems, { opacity: 0, duration: 0.3 });

            hamburger.addEventListener("click", e => { e.preventDefault(); toggleMenu(!hamburger.classList.contains("nav-open")); });
            menuBase.addEventListener("click", () => toggleMenu(false));
            document.addEventListener("keydown", e => e.key === "Escape" && toggleMenu(false));
        });

        // Akordiyon (GSAP ile)
        DOM.accordions.forEach(accordion => {
            const titles = gsap.utils.toArray(accordion.querySelectorAll(".mxd-accordion__title"));
            titles.forEach(title => {
                title.addEventListener("click", (e) => {
                    e.preventDefault();
                    const content = title.nextElementSibling;
                    const arrow = title.querySelector(".mxd-accordion__arrow");
                    const isActive = title.classList.contains("accordion-active");

                    // Diğer tüm açık akordiyonları kapat
                    titles.forEach(otherTitle => {
                        if (otherTitle !== title && otherTitle.classList.contains("accordion-active")) {
                            otherTitle.classList.remove("accordion-active");
                            otherTitle.querySelector(".mxd-accordion__arrow")?.classList.remove("accordion-rotate");
                            gsap.to(otherTitle.nextElementSibling, { height: 0, duration: 0.4, ease: "power2.inOut" });
                        }
                    });
                    
                    // Mevcut olanı aç/kapat
                    title.classList.toggle("accordion-active", !isActive);
                    arrow?.classList.toggle("accordion-rotate", !isActive);
                    gsap.fromTo(content, 
                        { height: isActive ? content.scrollHeight : 0 },
                        { height: isActive ? 0 : "auto", duration: 0.4, ease: "power2.inOut", clearProps: "height" }
                    );
                });
            });
        });

        // Hover Reveal
        DOM.hoverRevealItems.forEach((link, index) => {
            const revealContent = DOM.hoverRevealContents[index];
            const revealImage = DOM.hoverRevealImages[index];
            if (!revealContent || !revealImage) return;

            link.addEventListener("mousemove", (e) => {
                revealContent.style.opacity = 1;
                revealContent.style.transform = "translate(-80%, -50%)";
                revealImage.style.transform = "scale(1, 1)";
                revealContent.style.left = e.clientX + "px";
            });
            link.addEventListener("mouseleave", () => {
                revealContent.style.opacity = 0;
                revealImage.style.transform = "scale(1, 1.4)";
            });
        });
    };

    /**
     * Üçüncü parti eklentileri ve diğer çeşitli başlangıç ayarlarını yapar.
     */
    const initPlugins = () => {
        // SVG Fallback
        if (!Modernizr.svg) {
            document.querySelectorAll("img[src*='svg']").forEach(img => {
                img.setAttribute("src", img.getAttribute("src").replace(".svg", ".png"));
            });
        }
        
        // Masonry Layout
        if (DOM.masonryGallery) {
            imagesLoaded(DOM.masonryGallery, () => {
                new Masonry(DOM.masonryGallery);
                ScrollTrigger.refresh();
            });
        }

        // Ukiyo Parallax
        if (typeof Ukiyo !== 'undefined') {
            new Ukiyo(DOM.parallaxImages, { scale: 1.5, speed: 1.5 });
            new Ukiyo(DOM.parallaxImagesSmall, { scale: 1.2, speed: 1.5 });
            new Ukiyo(DOM.parallaxVideos, { scale: 1.5, speed: 1.5 });
        }
        
        // Renk Değiştirici
        if (DOM.themeBtn) {
            const getCurrentTheme = () => localStorage.getItem("template.theme") || (window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light");
            const loadTheme = (theme) => {
                document.documentElement.setAttribute("color-scheme", theme);
                DOM.themeBtn.innerHTML = theme === "light" ? '<i class="ph-bold ph-moon-stars"></i>' : '<i class="ph-bold ph-sun-horizon"></i>';
            };
            DOM.themeBtn.addEventListener("click", () => {
                let theme = getCurrentTheme() === "dark" ? "light" : "dark";
                localStorage.setItem("template.theme", theme);
                loadTheme(theme);
            });
            loadTheme(getCurrentTheme());
        }

        // SVG Enjeksiyonu
        if (DOM.svgToInject.length > 0) {
            SVGInjector(DOM.svgToInject, { evalScripts: "once", pngFallback: "assets/png" });
        }

        // AJAX Formları (jQuery bağımlılığı devam ediyor)
        if ($.fn.ajaxChimp) {
            $(".notify-form").ajaxChimp({
                url: "https://club.us10.list-manage.com/subscribe/post?u=e8d650c0df90e716c22ae4778&amp;id=54a7906900&amp;f_id=00b64ae4f0",
                callback: (resp) => { /* ... önceki kodla aynı ... */ }
            });
        }
        $("#contact-form").submit(function(e) { /* ... önceki kodla aynı ... */ });

        // Swiper Slider
        if (typeof Swiper !== 'undefined') {
            if (document.querySelector(".swiper-testimonials")) {
                new Swiper(".swiper-testimonials", { slidesPerView: "auto", grabCursor: true, spaceBetween: 30, autoplay: true, delay: 3000, speed: 1000, loop: true, parallax: true, pagination: { el: ".swiper-pagination", type: "fraction" }, navigation: { nextEl: ".swiper-button-next", prevEl: ".swiper-button-prev" }});
            }
            // Diğer Swiper'lar...
        }
    };
    
    /**
     * Uygulamayı başlatan ana fonksiyon.
     */
    const init = () => {
        cacheDOMElements();
        initSmoothScroll();
        initEventListeners();
        initPlugins();
        initScrollTriggers();
        initLoader(); // Loader en sonda başlasın ki her şey hazır olsun
    };

    // DOM yüklendiğinde uygulamayı başlat
    document.addEventListener('DOMContentLoaded', init);

})();